cmake_minimum_required(VERSION 3.10)
project(EnhancedSearchBot)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Find required packages
find_package(CURL REQUIRED)
find_package(PkgConfig REQUIRED)

# Find nlohmann/json
find_package(nlohmann_json 3.2.0 REQUIRED)

# If nlohmann/json is not found, try to find it manually
if(NOT nlohmann_json_FOUND)
    find_path(NLOHMANN_JSON_INCLUDE_DIRS
        NAMES nlohmann/json.hpp
        PATHS
        /usr/include
        /usr/local/include
        /opt/local/include
        /sw/include
        ${CMAKE_SOURCE_DIR}/include
    )
    
    if(NLOHMANN_JSON_INCLUDE_DIRS)
        set(nlohmann_json_INCLUDE_DIRS ${NLOHMANN_JSON_INCLUDE_DIRS})
        set(nlohmann_json_FOUND TRUE)
    endif()
endif()

# If still not found, download and include nlohmann/json
if(NOT nlohmann_json_FOUND)
    include(FetchContent)
    FetchContent_Declare(
        nlohmann_json
        GIT_REPOSITORY https://github.com/nlohmann/json.git
        GIT_TAG v3.11.2
    )
    FetchContent_MakeAvailable(nlohmann_json)
endif()

# Create executable
add_executable(enhanced_search_bot enhanced_search_bot.cpp)

# Include directories
target_include_directories(enhanced_search_bot PRIVATE
    ${CURL_INCLUDE_DIRS}
    ${nlohmann_json_INCLUDE_DIRS}
)

# Link libraries
target_link_libraries(enhanced_search_bot
    ${CURL_LIBRARIES}
    nlohmann_json::nlohmann_json
)

# Compiler flags
if(MSVC)
    target_compile_options(enhanced_search_bot PRIVATE /W4)
else()
    target_compile_options(enhanced_search_bot PRIVATE -Wall -Wextra -O2)
endif()

# Windows-specific settings
if(WIN32)
    target_link_libraries(enhanced_search_bot ws2_32 wldap32)
endif()

# Installation
install(TARGETS enhanced_search_bot
    RUNTIME DESTINATION bin
)

# Print configuration info
message(STATUS "CURL_INCLUDE_DIRS: ${CURL_INCLUDE_DIRS}")
message(STATUS "CURL_LIBRARIES: ${CURL_LIBRARIES}")
message(STATUS "nlohmann_json_INCLUDE_DIRS: ${nlohmann_json_INCLUDE_DIRS}") 